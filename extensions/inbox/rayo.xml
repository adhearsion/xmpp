<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Rayo</title>
  <abstract>This specification describes the Rayo third-party call control protocol.</abstract>
  <legal>
    <copyright>This XMPP Extension Protocol is copyright (c) 2011 by the XMPP Standards Foundation (XSF).</copyright>
    <permissions>Permission is hereby granted, free of charge, to any person obtaining a copy of this specification (the &quot;Specification&quot;), to make use of the Specification without restriction, including without limitation the rights to implement the Specification in a software program, deploy the Specification in a network service, and copy, modify, merge, publish, translate, distribute, sublicense, or sell copies of the Specification, and to permit persons to whom the Specification is furnished to do so, subject to the condition that the foregoing copyright notice and this permission notice shall be included in all copies or substantial portions of the Specification. Unless separate permission is granted, modified works that are redistributed shall not contain misleading information regarding the authors, title, number, or publisher of the Specification, and shall not claim endorsement of the modified works by the authors, any organization or project to which the authors belong, or the XMPP Standards Foundation.</permissions>
    <warranty>## NOTE WELL: This Specification is provided on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. In no event shall the XMPP Standards Foundation or the authors of this Specification be liable for any claim, damages, or other liability, whether in an action of contract, tort, or otherwise, arising from, out of, or in connection with the Specification or the implementation, deployment, or other use of the Specification. ##</warranty>
    <liability>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the XMPP Standards Foundation or any author of this Specification be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising out of the use or inability to use the Specification (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if the XMPP Standards Foundation or such author has been advised of the possibility of such damages.</liability>
    <conformance>This XMPP Extension Protocol has been contributed in full conformance with the XSF's Intellectual Property Rights Policy (a copy of which may be found at &lt;<link url='http://www.xmpp.org/extensions/ipr-policy.shtml'>http://www.xmpp.org/extensions/ipr-policy.shtml</link>&gt; or obtained by writing to XSF, P.O. Box 1641, Denver, CO 80201 USA).</conformance>
  </legal>
  <number>xxxx</number>
  <status>ProtoXEP</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  <author>
    <firstname>Jose</firstname>
    <surname>de Castro</surname>
    <email>jdecastro@voxeo.com</email>
    <jid>jdecastro@voxeo.com</jid>
    <uri>http://voxeolabs.com</uri>
  </author>
  <author>
    <firstname>Ben</firstname>
    <surname>Langfeld</surname>
    <email>ben@langfeld.me</email>
    <jid>ben@langfeld.me</jid>
    <uri>http://langfeld.me</uri>
  </author>
  <revision>
    <version>0.0.1</version>
    <date>2011-12-05</date>
    <initials>jdc</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>Rayo is a protocol for controlling media sessions, audio/video mixers and a variety of advanced media resources such as speech recognizers, speech synthesizers and audio/video recorders. These capabilities can be combined to create a wide variety of applications such as menu-based phone systems, in-game conferencing and anonymous dating services. Unlike <a href='xep-0166.html'>Jingle</a> or even <a href='http://en.wikipedia.org/wiki/Session_Initiation_Protocol'>SIP</a>, a Rayo client is not concerned with being a party to either the session negotiation or the media stream itself.</p>

  <ul>
    <li>A Rayo server takes on the role of negotiating a session between itself and some other endpoint, or between two distinct endpoints, by way of an implementation-specific means, be that Jingle, SIP, connection to the public telephone network, or anything else. The server may even bridge multiple networks.</li>
    <li>The server then presents the Rayo protocol as an interface to a client, allowing it to monitor and/or exercise third-party control over a particular session.</li>
    <li>The client has the option to accept/reject/answer inbound session requests, request the creation of outbound sessions and monitor their progress, execute media operations such as speech synthesis, speech recognition &amp; recording, and to end a session.</li>
  </ul>

  <p>The relationship between the calling parties, the Rayo server and the Rayo client looks something like this:</p>
  <code>
    [caller] ----SIP---- [rayo server] ( -----Jingle---- [calee] ) optional
                              |
                              |
                          rayo client
  </code>

  <p>This document defines the core Rayo protocol, and contains provisions for its extension by further specifications. Additionally, further documents specify implementation best practices, such as <a href='rayo-clustering.xml'>clustering</a>.</p>
</section1>
<section1 topic='How it works' anchor='howitworks'>
  <p>In order to understand the nature of a Rayo interaction, here we show a simple example of a control session.</p>

  <example caption="New call announces itself to a potential controlling party"><![CDATA[
<presence from='9f00061@call.shakespeare.lit'
          to='juliet@capulet.lit/balcony'>
  <offer xmlns='urn:xmpp:rayo:1'
         to='tel:+18003211212'
         from='tel:+13058881212'/>
</presence>
]]></example>

  <p>In this example, a call from 'tel:+13058881212' has reached the Rayo server 'shakespeare.lit' by calling 'tel:+18003211212', and been assigned an ID '9f00061'. The server has determined that 'juliet@capulet.lit' is a valid candidate for delegating control of the call, and so has directed an <a href='def-offer'>offer event</a> to her 'balcony' resource.</p>

  <p>The client then decides that it is able to handle the incoming call, and so accepts it from the server, thus gaining exclusive control and indicating to the calling party that the call will be processed and that it should ring.</p>

  <example caption="Potential controlling party attempts to become difinitive controlling party by sending the call an accept command"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    to='9f00061@call.shakespeare.lit'
    type='set'
    id='hd721'>
  <accept xmlns='urn:xmpp:rayo:1'/>
</iq>
]]></example>

  <example caption="Call acknowledges accept command to the (now) difinitive controlling party"><![CDATA[
<iq from='9f00061@call.shakespeare.lit'
    to='juliet@capulet.lit/balcony'
    type='result'
    id='hd721'/>
]]></example>

  <p>Following confirmation from the server that the attempt to gain control of the call was successful, the client proceeds to answer the call, opening up the media stream between the caller and the server.</p>

  <example caption="Controlling party answers the call"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    to='9f00061@call.shakespeare.lit'
    type='set'
    id='43jo3'>
  <answer xmlns='urn:xmpp:rayo:1'/>
</iq>
]]></example>

  <example caption="Call acknowledges answer command to controlling party"><![CDATA[
<iq from='9f00061@call.shakespeare.lit'
    to='juliet@capulet.lit/balcony'
    type='result'
    id='43jo3'/>
]]></example>

  <p>Once the client has confirmation that the call has been answered, it triggers the start of a media output component in order to play a message to the caller using a Text-to-speech (TTS) engine.</p>

  <example caption="Controlling party requests a new output component"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    to='9f00061@call.shakespeare.lit'
    type='set'
    id='j9d3j'>
  <output xmlns='urn:xmpp:rayo:output:1'
          voice='allison'>
    ![CDATA[
      You have no new messages. Goodbye!
    ]]
  </output>
</iq>
]]></example>

  <example caption="Call acknowledges request for new output component and provides its ID"><![CDATA[
<iq from='9f00061@call.shakespeare.lit'
    to='juliet@capulet.lit/balcony'
    type='result'
    id='j9d3j'>
  <ref xmlns='urn:xmpp:rayo:1' id='fgh4590'/>
</iq>
]]></example>

  <p>After confirmation that the output component was successfully created, the client then awaits notification of its completion.</p>

  <example caption="Output component announces its completion, giving the reason"><![CDATA[
<presence from='9f00061@call.shakespeare.lit/fgh4590'
          to='juliet@capulet.lit/balcony'
          type='unavailable'>
 <complete xmlns='urn:xmpp:rayo:ext:1'>
   <finish xmlns='urn:xmpp:rayo:output:complete:1' />
 </complete>
</presence>
]]></example>

  <p>The client then decides it has no further operations to perform on the call, and that the call should end. It instructs the server to hang up the call gracefully.</p>

  <example caption="Controlling party hangs up the call"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    to='9f00061@call.shakespeare.lit'
    type='set'
    id='f3wh8'>
  <hangup xmlns='urn:xmpp:rayo:1'/>
</iq>
]]></example>

  <example caption="Call acknowledges hangup command to controlling party"><![CDATA[
<iq from='9f00061@call.shakespeare.lit'
    to='juliet@capulet.lit/balcony'
    type='result'
    id='f3wh8'/>
]]></example>

  <example caption="Controlling party receives notification of the call being terminated"><![CDATA[
<presence from='9f00061@call.shakespeare.lit'
          to='juliet@capulet.lit/balcony'
          type='unavailable'>
  <end xmlns='urn:xmpp:rayo:1'>
    <hangup/>
  </end>
</presence>
]]></example>
</section1>
<section1 topic='Requirements' anchor='reqs'>
  <p></p>
  <ol>
    <li><strong>Call Control:</strong> Incoming calls are "offered" to clients at which point they can be answered, rejected, redirected to another destination, etc. Evey attempt is made to be shield the Rayo client from the low level telephony protocol (e.g. SIP, Jingle, PSTN, etc.)</li>
    <li><strong>Audio File Playback:</strong> A compatible Rayo server will fetch a file from a a specified URL and play the containing audio to the caller.</li>
    <li><strong>Speech Synthesis / TTS:</strong> In cases where dynamic data must be spoken, a Speech Synthesis engine many be used to play computer generated speech to the caller.</li>
    <li><strong>Touch-tone Events / DTMF:</strong> Rayo surfaces real-time event when the caller presses keys on their touch-tone keypad.</li>
    <li><strong>Speech Recognition:</strong> Enables the phone application to take spoken queues allowing for sophisticated voice-driven menus and directory services.</li>
    <li><strong>Call Recording:</strong> Can be used to capture the caller's voice (e.g. Voicemail) or both sides of the call for auditing and compliance purposes.</li>
    <li><strong>Mixing:</strong> Typically referred to as an audio "conference"; calls can be joined together so that the participants can hear each other in real-time.</li>
  </ol>

  <p>Many third-party call control protocols have preceeded Rayo (see Asterisk's AGI/AMI, FreeSWITCH's eventsocket, Microsoft's TAPI, Java's JTAPI, Novell/AT&amp;T's TSAPI, CSTA, etc). None of these protocols is ideal, and all have at least one or more of the following drawbacks:</p>
  <ul>
    <li><strong>Totally ground-up wire protocol</strong> requiring implementation all the way down to the socket</li>
    <li><strong>Platform/vendor/hardware specific</strong></li>
    <li><strong>Synchronous interface</strong></li>
    <li><strong>Inconsistent</strong> - evolved, rather than designed</li>
    <li><strong>Lacking in scaleability</strong> - client/server sometimes tied one-to-one, servers rarely clustered, advanced message routing not possible</li>
    <li><strong>Poor security</strong> - lack of wire-level encryption, lack of or sub-standard authentication mechanisms, lack of or limited authorization mechanisms, lack of or poor sandboxing between multiple tenants on one system</li>
    <li><strong>Inextensible</strong></li>
  </ul>

  <p>Rayo has been designed with these failings in mind, and intends to address many concerns not addressed by these earlier attempts. The following considerations were made:</p>
  <ul>
    <li><strong>Simple client library implementation</strong> - XMPP client libraries exist in all modern languages, and many are of a high standard.</li>
    <li><strong>Cross-platform standard</strong> - The protocol must not expose any platform specifics and all elements should be candidates for implementation on any suitable platform. Addiditionally, the protocol must be ratified as a standard following a community discussion.</li>
    <li><strong>Asynchronous interface</strong> - The protocol should present an asynchronous interface for the purposes of performance and flexibility in performing paralell operations.</li>
    <li><strong>Consistent</strong> - The protocol must provide a considered, unobtrusive, logically and philisophically consistent interface.</li>
    <li><strong>Federated</strong> - The protocol must support communication between client and server entities on separately owned, operated and addressed networks.</li>
    <li><strong>Flexible routing</strong> - The protocol must lend itself to routing across wide networks such as the internet, and to potential complex routing such as proxying or redirection. Additionally, the client and server should each be aware of the presence of the other and be able to use such information to make routing decisions.</li>
    <li><strong>Extensible</strong> - The protocol must provide for the possibility of extra functionality being added by future specifications or an individual implementation.</li>
  </ul>

  <p>Additionally, the protocol is required to abstract away the complexity of the raw negotioation/transport protocols such as SIP, but to map conceptually to such protocols. Best practices for the implementation of Rayo on top of <a href='rayo-sip.xml'>SIP</a> and <a href='rayo-jingle.html'>Jingle</a> environments, as well as the public APIs of <a href='rayo-asterisk.html'>Jingle</a> and <a href='rayo-freeswitch.html'>FreeSWITCH</a> are made in the respective specifications.</p>
</section1>
<section1 topic='Terminology' anchor='terms'>
  <section2 topic='Glossary' anchor='terms-glossary'>
    <dl>
      <di>
        <dt>Third-party call control (3PCC)</dt>
        <dd>The observation and/or control of a live media session by an entity which is not a direct party to the session.</dd>
      </di>
      <di>
        <dt>Command</dt>
        <dd>Commands instruct the receiving entity to perform some atomic action. Commands may be executed against a given call, component or mixer and can be considered completed as soon as they receive a response.</dd>
      </di>
      <di>
        <dt>Component</dt>
        <dd>Components extend the Rayo protocol by providing additional media and call control functionality. Components are similar to commands, but have a lifecycle attached to them. A component, once created and attached to a call or mixer, will respond giving an ID that it is known by. The component will then begin execution, and may trigger events or have commands issued to it. Finally, once the component is stopped or comes to an end naturally, it will issue a special &lt;complete/&gt; event</dd>
      </di>
      <di>
        <dt>Potential controlling party</dt>
        <dd>An XMPP entity to which an offer to control an incoming call may be sent.</dd>
      </di>
      <di>
        <dt>Difinitive controlling party</dt>
        <dd>The XMPP entity which gains a lock on control of a session, either by requesting the session's creation, or being the first respondent to an offer.</dd>
      </di>
    </dl>
  </section2>

  <section2 topic='Conventions' anchor='terms-conventions'>
    In examples, the following JIDs are used:
    <ul>
      <li><strong>juliet@capulet.lit/balcony, romeo@montague.lit/orchard</strong> - Potential controlling parties</li>
      <li><strong>shakespeare.lit</strong> - The root domain of the Rayo service</li>
      <li><strong>call.shakespeare.lit</strong> - The Rayo service's call domain</li>
      <li><strong>mixer.shakespeare.lit</strong> - The Rayo service's mixer domain</li>
    </ul>
  </section2>
</section1>
<section1 topic='Concepts and Approach' anchor='concepts'>
  <p>A complete Rayo deployment has several elements and interacting entities which must be understood.</p>

  <section2 topic='Actors' anchor='concepts-actors'>
    <section3 topic='Server' anchor='concepts-actors-server'>
      <p>A Rayo server is an entity which is capable of receiving and intiating calls and being party to their media stream, while exposing a Rayo interface to a client in order to permit control over its calls. The Rayo server may handle calls in any way supported by the implementation, such as SIP, Jingle, etc, and should expose a full XMPP domain at the root level of the service deployment (eg shakespeare.lit).</p>
      <p>The Rayo server is responsible for keeping track of valid clients, routing calls to the correct potential controlling parties, performing authorization measures on received stanzas, etc.</p>
      <p>For the purposes of this specification, complex server-side deployments such as clusters, proxies, gateways, protocol translators, etc are not considered. Further details of such concepts may be found in their relevant specifications.</p>
    </section3>
    <section3 topic='Client(s)' anchor='concepts-actors-client'>
      <p>A Rayo client is an entity which implements the Rayo protocol for the purpose of asserting control over calls made available by a Rayo server. The method by which such control measures are determined is outside the scope of this document, but may be the result of human interaction or some automated decision-making process.</p>
      <p>A Rayo client is responsible for indicating its availability to a Rayo server and responding to offer messages appropriately.</p>
    </section3>
    <section3 topic='Calls' anchor='concepts-actors-calls'>
      <p>A Rayo call is a short-lived XMPP entity within the scope of the deployment's root domain (usually at a sub-domain) with the purpose of representing a single session. It is usually a simple alias for the main server process.</p>
      <p>A Rayo call is the entity with which most client interactions are made, and is responsible for sending its events to and receiving commands from a client.</p>
      <p>Calls have separate presence from the root domain of the service and thus appear to be separate entities.</p>
    </section3>
    <section3 topic='Mixers' anchor='concepts-actors-mixers'>
      <p>A Rayo call is an XMPP entity within the scope of the deployment's root domain (usually at a sub-domain) with the purpose of representing a service for the linking of media streams from several calls. It is usually a simple alias for the main server process.</p>
      <p>A Rayo mixer is responsible for sending its events to and receiving commands from a client, and may have some components executed on it directly.</p>
      <p>Mixers have separate presence from the root domain of the service and its calls and thus appear to be separate entities.</p>
    </section3>
    <section3 topic='Commands' anchor='concepts-actors-commands'>
      <p>A Rayo command is a simple combination of request and response and may be issued directly to the service, or to a call or mixer. Commands are executed serially and are generally very short-lived.</p>
    </section3>
    <section3 topic='Components' anchor='concepts-actors-components'>
      <p>Components extend the Rayo protocol by providing additional media and call control functionality.</p>

      <p>Components are started by sending a specialized command to a call or mixer. Unlike basic commands, components have a lifecycle. Thus, a request for creation of a component will return a reference to the component's ID, and the component will continue to execute until it completes, potentially sending events and processing commands along the way (such as an instruction to pause or terminate), before finally issuing an event indicating its completion and thus unavailability. Multiple components may be active on a call or mixer at any one time, and commands may be executed on any entity during the execution of a component.</p>
    </section3>
  </section2>

  <section2 topic="Addressing Scheme" anchor='addressing'>
    <p>All of the actors described in the previous section (with the exception of commands) are represented by XMPP entities with a JID of their own. Thus, a scheme for determining the JIDs of each of these entities is required. The following is the required naming scheme for Rayo deployments.</p>
    <table>
      <tr>
        <th>Actor</th>
        <th>JID format</th>
        <th>Example JID</th>
      </tr>
      <tr>
        <td>Server</td>
        <td>[service domain]</td>
        <td>shakespeare.lit</td>
      </tr>
      <tr>
        <td>Client</td>
        <td>any JID</td>
        <td>juliet@capulet.lit/balcony</td>
      </tr>
      <tr>
        <td>Call</td>
        <td>[call ID]@[call sub-domain].[service domain]</td>
        <td>f88eh2@call.shakespeare.lit</td>
      </tr>
      <tr>
        <td>Mixer</td>
        <td>[mixer name]@[mixer sub-domain].[service domain]</td>
        <td>conf1@mixer.shakespeare.lit</td>
      </tr>
      <tr>
        <td>Call Component</td>
        <td>[call ID]@[call sub-domain].[service domain]/[component ID]</td>
        <td>f88eh2@call.shakespeare.lit/8f83jf</td>
      </tr>
      <tr>
        <td>Mixer Component</td>
        <td>[mixer name]@[mixer sub-domain].[service domain]/[component ID]</td>
        <td>conf1@mixer.shakespeare.lit/932eu</td>
      </tr>
      <tr>
        <td>Server Component</td>
        <td>[service domain]/[component ID]</td>
        <td>shakespeare.lit/f3fg4</td>
      </tr>
    </table>
    <p>Commands should be addressed to the entity on which they should be enacted. Individual commands only apply to certain object (for example instructing a component to hangup will return an error). In general, commands may be sent from a client to the service, a call, a mixer or a component. Events may be sent from a call, a mixer or a component to a client.</p>
  </section2>

  <section2 topic='Delivery Mechanism' anchor='concepts-delivery'>
    <p>Rayo defines several events and commands which may be executed on one of the above actors. These payloads must be sent within an XMPP primitive element, and the rules are as such:</p>
    <ul>
      <li><strong>Events:</strong> Sent as directed presence from the entity producing the event to a client.</li>
      <li><strong>Commands:</strong> Sent as an &lt;iq/&gt; 'set' from the client to the entity to be acted on. Responses returned as an &lt;iq/&gt; 'result' or 'error'.</li>
    </ul>
  </section2>
</section1>
<section1 topic='Session Flow' anchor='session'>
  <section2 topic='Session Establishment' anchor='session-establishment'>
    <section3 topic='Inbound Call' anchor='session-establishment-inbound'>

    </section3>

    <section3 topic='Outbound Call' anchor='session-establishment-outbound'>

    </section3>
  </section2>

  <section2 topic='Component Execution' anchor='session-component-execution'>

  </section2>

  <section2 topic='Joining Calls' anchor='session-joining'>

  </section2>

  <section2 topic='Session Termination' anchor='session-termination'>

  </section2>
</section1>
<section1 topic='Formal Definition' anchor='def'>
  <section2 topic='Call target/source URI' anchor='def-uri'>
  </section2>
  <section2 topic='Offer Element' anchor='def-offer'>
    <p>The offer element MAY be empty or contain one or more header elements (for which see <link url='#def-header'>Header Element</link>).</p>
    <p>The attributes of the offer element are as follows.</p>
    <table caption='Attributes of Offer Element'>
      <tr>
        <th>Attribute</th>
        <th>Definition</th>
        <th>Inclusion</th>
      </tr>
      <tr>
        <td>to</td>
        <td>A valid Rayo URI indicating the target of the call as described under <link url='#def-uri'>Call target/source URI</link>.</td>
        <td>REQUIRED</td>
      </tr>
      <tr>
        <td>from</td>
        <td>A valid Rayo URI indicating the source of the call as described under <link url='#def-uri'>Call target/source URI</link>.</td>
        <td>REQUIRED</td>
      </tr>
    </table>
  </section2>
  <section2 topic='Header Element' anchor='def-header'>
    <p>The header element MUST be empty.</p>
    <p>The attributes of the header element are as follows.</p>
    <table caption='Attributes of Header Element'>
      <tr>
        <th>Attribute</th>
        <th>Definition</th>
        <th>Inclusion</th>
      </tr>
      <tr>
        <td>name</td>
        <td>A string representing the name by which the header may be known.</td>
        <td>REQUIRED</td>
      </tr>
      <tr>
        <td>value</td>
        <td>A string value for the named header.</td>
        <td>REQUIRED</td>
      </tr>
    </table>
  </section2>
  <section2 topic='Accept Element' anchor='def-accept'>
    <p>The accept element MAY be empty or contain one or more header elements (for which see <link url='#def-header'>Header Element</link>).</p>
    <p>The accept element has no attributes.</p>
  </section2>
  <section2 topic='Answer Element' anchor='def-answer'>
    <p>The answer element MAY be empty or contain one or more header elements (for which see <link url='#def-header'>Header Element</link>).</p>
    <p>The answer element has no attributes.</p>
  </section2>
  <section2 topic='Redirect Element' anchor='def-redirect'>
    <p>The redirect element MAY be empty or contain one or more header elements (for which see <link url='#def-header'>Header Element</link>).</p>
    <p>The attributes of the redirect element are as follows.</p>
    <table caption='Attributes of Offer Element'>
      <tr>
        <th>Attribute</th>
        <th>Definition</th>
        <th>Inclusion</th>
      </tr>
      <tr>
        <td>to</td>
        <td>A valid Rayo URI indicating the new target for the call as described under <link url='#def-uri'>Call target/source URI</link>.</td>
        <td>REQUIRED</td>
      </tr>
    </table>
  </section2>
  <section2 topic='Reject Element' anchor='def-reject'>
    <p>The reject element MUST contain a single reject reason element (for which see <link url='#def-reject-reason'>Reject Reason Element</link>). It MAY also contain one or more header elements (for which see <link url='#def-header'>Header Element</link>).</p>
    <p>The reject element has no attributes.</p>
  </section2>
  <section2 topic='Dial Element' anchor='def-dial'>
    <p>The dial element MAY be empty or contain one or more header elements (for which see <link url='#def-header'>Header Element</link>).</p>
    <p>The attributes of the dial element are as follows.</p>
    <table caption='Attributes of Dial Element'>
      <tr>
        <th>Attribute</th>
        <th>Definition</th>
        <th>Inclusion</th>
      </tr>
      <tr>
        <td>to</td>
        <td>A valid Rayo URI indicating the target of the call as described under <link url='#def-uri'>Call target/source URI</link>.</td>
        <td>REQUIRED</td>
      </tr>
      <tr>
        <td>from</td>
        <td>A valid Rayo URI indicating the source of the call as described under <link url='#def-uri'>Call target/source URI</link>.</td>
        <td>REQUIRED</td>
      </tr>
    </table>
  </section2>
  <section2 topic='Ringing Element' anchor='def-ringing'>
    <p>The ringing element MAY be empty or contain one or more header elements (for which see <link url='#def-header'>Header Element</link>).</p>
    <p>The ringing element has no attributes.</p>
  </section2>
  <section2 topic='Answered Element' anchor='def-answered'>
    <p>The answered element MAY be empty or contain one or more header elements (for which see <link url='#def-header'>Header Element</link>).</p>
    <p>The answered element has no attributes.</p>
  </section2>
  <section2 topic='End Element' anchor='def-end'>
    <p>The end element MUST contain a single end reason element (for which see <link url='#def-end-reason'>End Reason Element</link>). It MAY also contain one or more header elements (for which see <link url='#def-header'>Header Element</link>).</p>
    <p>The end element has no attributes.</p>
  </section2>
  <section2 topic='Hangup Element' anchor='def-hangup'>
    <p>The hangup element MAY contain one or more header elements (for which see <link url='#def-header'>Header Element</link>).</p>
    <p>The hangup element has no attributes.</p>
  </section2>
  <section2 topic='Components' anchor='def-components'>
    <section3 topic='Media Output' anchor='def-component-output'>
      <p>An output component is used to instruct the server to generate audible output to a call or mixer.</p>
      <p>The output element MUST contain a single CDATA entitiy containing the SSML document to render.</p>
      <p>The attributes of the output element are as follows.</p>
      <table caption='Attributes of Output Element'>
        <tr>
          <th>Attribute</th>
          <th>Definition</th>
          <th>Possible Values</th>
          <th>Default</th>
          <th>Inclusion</th>
        </tr>
        <tr>
          <td>interrupt-on</td>
          <td>The type of media input to allow interrupting the output.</td>
          <td>any|dtmf|speech|none</td>
          <td>none</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>start-offset</td>
          <td></td>
          <td>A positive integer in ms.</td>
          <td>0</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>start-paused</td>
          <td>Wether or not to start the output in the paused state, ready to be resumed.</td>
          <td>true|false</td>
          <td>false</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>repeat-interval</td>
          <td>The amount of time to wait between successive repetitions of the document.</td>
          <td>A positive integer in ms.</td>
          <td>0</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>repeat-times</td>
          <td>The number of times to produce the requested output before considering it to be complete.</td>
          <td>A positive integer.</td>
          <td>1</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>max-time</td>
          <td>The maximum time the output should be allowed to run for before being force-terminated.</td>
          <td>A positive integer in ms.</td>
          <td>-1</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>voice</td>
          <td>The voice with which to speak the requested document.</td>
          <td>Any voice supported by the TTS engine.</td>
          <td>allison</td>
          <td>OPTIONAL</td>
        </tr>
      </table>
      <section4 topic='Commands' anchor='def-component-output-commands'>
        <p>The input component supports the component Stop command, along with the following.</p>
        <section5 topic='Pause' anchor='def-component-output-commands-pause'>
          <p>Instructs the server to pause the media output, but not terminate the component.</p>
          <p>The pause element MUST be empty.</p>
          <p>The pause element has no attributes.</p>
        </section5>
        <section5 topic='Resume' anchor='def-component-output-commands-resume'>
          <p>Instructs the server to resume a paused output.</p>
          <p>The resume element MUST be empty.</p>
          <p>The resume element has no attributes.</p>
        </section5>
        <section5 topic='SpeedUp' anchor='def-component-output-commands-speedup'>
          <p>Instructs the server to increase the speed by a unit amount.</p>
          <p>The speed-up element MUST be empty.</p>
          <p>The speed-up element has no attributes.</p>
        </section5>
        <section5 topic='SpeedDown' anchor='def-component-output-commands-speeddown'>
          <p>Instructs the server to reduce the speed by a unit amount.</p>
          <p>The speed-down element MUST be empty.</p>
          <p>The speed-down element has no attributes.</p>
        </section5>
        <section5 topic='VolumeUp' anchor='def-component-output-commands-volumeup'>
          <p>Instructs the server to increase the volume by a unit amount.</p>
          <p>The volume-up element MUST be empty.</p>
          <p>The volume-up element has no attributes.</p>
        </section5>
        <section5 topic='VolumeDown' anchor='def-component-output-commands-volumedown'>
          <p>Instructs the server to reduce the volume by a unit amount.</p>
          <p>The volume-down element MUST be empty.</p>
          <p>The volume-down element has no attributes.</p>
        </section5>
        <section5 topic='Seek' anchor='def-component-output-commands-seek'>
          <p>Instructs the server to move the play marker of the output forward or back in time before resuming output.</p>
          <p>The seek element MUST be empty.</p>
          <p>The attributes of the seek element are as follows.</p>
          <table caption='Attributes of Seek Element'>
            <tr>
              <th>Attribute</th>
              <th>Definition</th>
              <th>Possible Values</th>
              <th>Inclusion</th>
            </tr>
            <tr>
              <td>direction</td>
              <td>The direction in time in which to move the current play marker.</td>
              <td>forward|back</td>
              <td>REQUIRED</td>
            </tr>
            <tr>
              <td>amount</td>
              <td>A time value by which to move the play marker, in milliseconds</td>
              <td>A positive integer, in ms.</td>
              <td>REQUIRED</td>
            </tr>
          </table>
        </section5>
      </section4>
      <section4 topic='Events' anchor='def-component-output-events'>
        <section5 topic='Complete' anchor='def-component-output-events-complete'>
          <p>The complete element MUST contain a valid completion reason element. Possible completion reasons are as follows, in addition to the standard component completion reasons.</p>
          <section6 topic='Success' anchor='def-component-output-events-complete-success'>
            <p>Indicates that the output was completed successfully.</p>
            <p>The nomatch element MUST be empty.</p>
            <p>The nomatch element has no attributes.</p>
          </section6>
        </section5>
      </section4>
    </section3>
    <section3 topic='Media Input' anchor='def-component-input'>
      <p>An input component is used to instruct the server to gather media input from a call or mixer, using either DTMF or ASR.</p>
      <p>The input element MUST contain one or more grammar elements (for which see <link url='#def-comoponent-input-grammar'>Grammar Element</link>).</p>
      <p>The attributes of the input element are as follows.</p>
      <table caption='Attributes of Input Element'>
        <tr>
          <th>Attribute</th>
          <th>Definition</th>
          <th>Possible Values</th>
          <th>Default</th>
          <th>Inclusion</th>
        </tr>
        <tr>
          <td>mode</td>
          <td>The method by which to collect input.</td>
          <td>any|dtmf|speech</td>
          <td>any</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>hotword-timeout</td>
          <td>The amount of time for which to discard invalid input, awaiting a match.</td>
          <td>A positive integer in ms, or -1 to disable.</td>
          <td>-1</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>partial-match</td>
          <td>Wether or not the component should trigger match events whenever a partial match is detected.</td>
          <td>true|false</td>
          <td>false</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>terminator</td>
          <td>The terminator digit by which to force completion of the grammar.</td>
          <td>0-9,#,*</td>
          <td>none</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>recognizer</td>
          <td></td>
          <td>Any valid ISO 639‑3 language code</td>
          <td>en-US</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>initial-timeout</td>
          <td>The timeout to be applied before the first digit is captured in the case of DTMF input, or before the beginning of an utterance is detected.</td>
          <td>Any positive integer in miliseconds, or -1 for no timeout.</td>
          <td>-1</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>inter-digit-timeout</td>
          <td>The timeout to be applied between the first and subsequent captured digits.</td>
          <td>Any positive integer in miliseconds, or -1 for no timeout.</td>
          <td>-1</td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>sensitivity</td>
          <td></td>
          <td>A decimal value between 0 and 1.</td>
          <td></td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>min-confidence</td>
          <td></td>
          <td>A decimal value between 0 and 1.</td>
          <td></td>
          <td>OPTIONAL</td>
        </tr>
        <tr>
          <td>max-silence</td>
          <td>The maximum period of silence permitted before a timeout is triggered.</td>
          <td>Any positive integer in miliseconds, or -1 for no timeout.</td>
          <td>-1</td>
          <td>OPTIONAL</td>
        </tr>
      </table>
      <section4 topic='Grammar Element' anchor='def-component-input-grammar'>
        <p>The grammar element defines the grammar by which input should be matched.</p>
        <p>The grammar element MUST have either a url attribute set OR a content type and a body.</p>
        <p>The attributes of the input element are as follows.</p>
        <table caption='Attributes of Input Element'>
          <tr>
            <th>Attribute</th>
            <th>Definition</th>
            <th>Possible Values</th>
            <th>Default</th>
            <th>Inclusion</th>
          </tr>
          <tr>
            <td>url</td>
            <td>A URL to a grammar definition.</td>
            <td>Any valid URI scheme supported by the server (eg HTTP).</td>
            <td>none</td>
            <td>REQUIRED unless content-type and content are set</td>
          </tr>
          <tr>
            <td>content-type</td>
            <td>The content type of the grammar contained within the grammar element.</td>
            <td>application/grammar+voxeo|application/grammar+grxml</td>
            <td>none</td>
            <td>REQUIRED unless url is set</td>
          </tr>
        </table>
      </section4>
      <section4 topic='Commands' anchor='def-component-input-commands'>
        <p>The input component supports only the component Stop command.</p>
      </section4>
      <section4 topic='Events' anchor='def-component-input-events'>
        <section5 topic='Match' anchor='def-component-input-events-match'>
          <p>Indicates that the input received triggered a match with the specified grammar, and provides results. This constitutes a partial match, and does not signal the end of the grammar.</p>
          <p>The match element MUST contain valid interpretation and utterance elements.</p>
          <p>The attributes of the match element are as follows.</p>
          <table caption='Attributes of Match Element'>
            <tr>
              <th>Attribute</th>
              <th>Definition</th>
              <th>Possible Values</th>
              <th>Inclusion</th>
            </tr>
            <tr>
              <td>mode</td>
              <td>The method by which detection occurred.</td>
              <td>speech|dtmf</td>
              <td>REQUIRED</td>
            </tr>
            <tr>
              <td>confidence</td>
              <td>The confidence with which the interpretation matches the utterance</td>
              <td>A decimal value between 0 and 1.</td>
              <td>REQUIRED</td>
            </tr>
          </table>
        </section5>
        <section5 topic='Complete' anchor='def-component-input-events-complete'>
          <p>The complete element MUST contain a valid completion reason element. Possible completion reasons are as follows, in addition to the standard component completion reasons.</p>
          <section6 topic='Success' anchor='def-component-input-events-complete-success'>
            <p>Indicates that the input received matches the specified grammar, and provides results.</p>
            <p>The success element MUST contain valid interpretation and utterance elements.</p>
            <p>The attributes of the success element are as follows.</p>
            <table caption='Attributes of Success Element'>
              <tr>
                <th>Attribute</th>
                <th>Definition</th>
                <th>Possible Values</th>
                <th>Inclusion</th>
              </tr>
              <tr>
                <td>mode</td>
                <td>The method by which detection occurred.</td>
                <td>speech|dtmf</td>
                <td>REQUIRED</td>
              </tr>
              <tr>
                <td>confidence</td>
                <td>The confidence with which the interpretation matches the utterance</td>
                <td>A decimal value between 0 and 1.</td>
                <td>REQUIRED</td>
              </tr>
            </table>
          </section6>
          <section6 topic='Nomatch' anchor='def-component-input-events-complete-nomatch'>
            <p>Indicates that the input received did not match the specified grammar.</p>
            <p>The nomatch element MUST be empty.</p>
            <p>The nomatch element has no attributes.</p>
          </section6>
          <section6 topic='Noinput' anchor='def-component-input-events-complete-noinput'>
            <p>Indicates that the component did not receive any input.</p>
            <p>The noinput element MUST be empty.</p>
            <p>The noinput element has no attributes.</p>
          </section6>
        </section5>
      </section4>
    </section3>
  </section2>
</section1>
<section1 topic='Use Cases' anchor='usecases'>
  <p>STRONGLY RECOMMENDED.</p>
</section1>
<section1 topic='Determining Support' anchor='support'>
  <p>If an entity supports Rayo, it MUST advertise that fact by returning a feature of "urn:xmpp:rayo:0" &VNOTE; in response to a &xep0030; information request. The response MUST also include features for the application formats and transport methods supported by the responding entity, as described in the relevant specifications.</p>
  <example caption="Service Discovery Information Request - Client to Server"><![CDATA[
<iq from='kingclaudius@shakespeare.lit/castle'
    id='disco1'
    to='call.rayo.org'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
  ]]></example>
  <example caption="Service Discovery Information Response - Client to Server"><![CDATA[
<iq from='call.rayo.org'
    id='disco1'
    to='kingclaudius@shakespeare.lit/castle'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <feature var='urn:xmpp:rayo:0'/>
  </query>
</iq>
  ]]></example>
  <example caption="Service Discovery Information Request - Server to Client"><![CDATA[
<iq from='call.rayo.org'
    id='disco1'
    to='laertes@shakespeare.lit/castle'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
  ]]></example>
  <example caption="Service Discovery Information Response - Server to Client"><![CDATA[
<iq from='laertes@shakespeare.lit/castle'
    id='disco1'
    to='call.rayo.org'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <feature var='urn:xmpp:rayo:client:0'/>
  </query>
</iq>
  ]]></example>
  <p>In order for an application to determine whether an entity supports this protocol, where possible it SHOULD use the dynamic, presence-based profile of service discovery defined in &xep0115;. However, if an application has not received entity capabilities information from an entity, it SHOULD use explicit service discovery instead.</p>
</section1>
<section1 topic='Extending Rayo' anchor='extensions'>
  <!-- TODO: Explain Rayo's extensibility (components, extra commands, deployment flexibility) and define the forum for such extensions -->
</section1>
<section1 topic='Implementation Notes' anchor='impl'>
  <!-- TODO: Translation on Asterisk/FreeSWITCH -->
  <!-- TODO: Implementation as a SIP servlet on Voxeo PRISM / Moho -->
  <!-- TODO: Clustering (separate spec?) & scalability -->
</section1>
<section1 topic='Security Considerations' anchor='security'>
  <section2 topic='Denial of Service' anchor='security-dos'>
    <p>Rayo sessions can be resource-intensive. Therefore, it is possible to launch a denial-of-service attack against an entity by burdening it with too many Rayo sessions. Care must be taken to accept sessions only from known entities and only if the entity's device is able to process such sessions.</p>
  </section2>
  <section2 topic='Communication Through Gateways' anchor='security-gateways'>
    <p>Rayo communications can be enabled through gateways to non-XMPP networks, whose security characteristics can be quite different from those of XMPP networks. For example, on some SIP networks authentication is optional and "from" addresses can be easily forged. Care must be taken in communicating through such gateways.</p>
  </section2>
  <section2 topic='Information Exposure' anchor='security-info'>
    <p>Mere negotiation of a Rayo session can expose sensitive information about the parties (e.g. IP addresses). Care must be taken in communicating such information, and end-to-end encryption should be used if the parties do not trust the intermediate servers or gateways.</p>
  </section2>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
    <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>This specification defines the following XML namespaces:</p>
    <ul>
      <li>urn:xmpp:rayo:1</li>
      <li>urn:xmpp:rayo:client:1</li>
      <li>urn:xmpp:rayo:ext:1</li>
      <li>urn:xmpp:rayo:ext:complete:1</li>
      <li>urn:xmpp:rayo:output:1</li>
      <li>urn:xmpp:rayo:output:complete"1</li>
      <li>urn:xmpp:rayo:input:1</li>
      <li>urn:xmpp:rayo:input:complete:1</li>
      <li>urn:xmpp:rayo:record:1</li>
      <li>urn:xmpp:rayo:record:complete:1</li>
    </ul>
    <p>The &REGISTRAR; includes the foregoing namespaces in its registry at &NAMESPACES;, as governed by &xep0053;.</p>
  </section2>
  <section2 topic='Namespace Versioning' anchor='registrar-versioning'>
    <p>If the protocol defined in this specification undergoes a major revision that is not fully backward-compatible with an older version, or that contains significant new features, the XMPP Registrar shall increment the protocol version number found at the end of the XML namespaces defined herein, as described in Section 4 of <cite>XEP-0053</cite>.</p>
  </section2>
  <section2 topic='Rayo Components Registry' anchor='registrar-components'>
    <p>The XMPP Registrar maintains a registry of Rayo components. All component registrations with the exception of those defined above shall be defined in separate specifications (not in this document). Components defined within the XEP series MUST be registered with the XMPP Registrar, resulting in protocol URNs of the form "urn:xmpp:rayo:component_name:X" (where "component_name" is the registered name of the component and "X" is a non-negative integer).</p>
    &REGPROCESS;
    <code><![CDATA[
<component>
  <name>The name of the component.</name>
  <desc>A natural-language summary of the component.</desc>
  <doc>The document in which the component is specified.</doc>
</component>
    ]]></code>
  </section2>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <section2 topic='Rayo' anchor='schema-rayo'>
  <code><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
  targetNamespace="urn:xmpp:rayo:1"
  xmlns:tns="urn:xmpp:rayo:1"
  elementFormDefault="qualified">

  <annotation>
    <documentation>
      The protocol documented by this schema is defined at http://rayo.org/xep
    </documentation>
  </annotation>

  <!-- Header elements -->
  <complexType name="headerType">
    <attribute name="name" type="string" />
    <attribute name="value" type="string" />
  </complexType>

  <!-- Offer Event -->
  <element name="offer">
    <annotation>
      <documentation>
        Informs the recipient that a new call is available for control and invites it to take control using progress commands below.
      </documentation>
    </annotation>
    <complexType>
      <attribute name="to" type="anyURI" use="required">
        <annotation>
          <documentation>
            The target URI for the call. May me a tel URI, SIP URI, a JID (for Jingle) or some other platform-specific addressing mechanism.
          </documentation>
        </annotation>
      </attribute>
      <attribute name="from" type="anyURI" use="optional">
        <annotation>
          <documentation>
            The caller ID URI for the call. May me a tel URI, SIP URI, a JID (for Jingle) or some other platform-specific addressing mechanism.
          </documentation>
        </annotation>
      </attribute>
      <sequence>
        <element name="header" type="tns:headerType" minOccurs="0" maxOccurs="unbounded">
          <annotation>
            <documentation>
              Set of header variables sent by the originating party (eg SIP INVITE headers).
            </documentation>
          </annotation>
        </element>
      </sequence>
    </complexType>
  </element>

  <complexType name="callProgressType">
    <sequence>
      <element name="header" type="tns:headerType" minOccurs="0" maxOccurs="unbounded" />
    </sequence>
  </complexType>

  <!-- Ringing Event -->
  <element name="ringing" type="tns:callProgressType">
    <annotation>
      <documentation>
        Indication that an outbound call has begun ringing, or accepted by the remote party.
      </documentation>
    </annotation>
  </element>

  <!-- Answered Event -->
  <element name="answered" type="tns:callProgressType">
    <annotation>
      <documentation>
        Indication that an outbound call has been answered and that the 3rd party negotiation has completed. At this point, the media stream should be open.
      </documentation>
    </annotation>
  </element>

  <!-- End Event -->
  <element name="end">
    <annotation>
      <documentation>
        Indicated to a call's controlling party that the call has come to an end, giving the reason.
      </documentation>
    </annotation>
    <complexType>
      <sequence>
        <choice>
          <element name="hungup" type="tns:empty">
            <annotation>
              <documentation>
                Indication that the call ended due to a normal hangup by either party.
              </documentation>
            </annotation>
          </element>
          <element name="timeout" type="tns:empty">
            <annotation>
              <documentation>
                Indication that the call ended due to a timeout in contacting the remote party.
              </documentation>
            </annotation>
          </element>
          <element name="busy" type="tns:empty">
            <annotation>
              <documentation>
                Indication that the call ended due to being rejected by the remote party subsequent to being accepted.
              </documentation>
            </annotation>
          </element>
          <element name="reject" type="tns:empty">
            <annotation>
              <documentation>
                Indication that the call ended due to being rejected by the remote party before being accepted.
              </documentation>
            </annotation>
          </element>
          <element name="error" type="tns:empty">
            <annotation>
              <documentation>
                Indication that the call ended due to a system error.
              </documentation>
            </annotation>
          </element>
        </choice>
        <element name="header" type="tns:headerType" minOccurs="0" maxOccurs="unbounded">
          <annotation>
            <documentation>
             Set of header variables sent by the remote party along with the indication of the call ending.
            </documentation>
          </annotation>
        </element>
      </sequence>
    </complexType>
  </element>

  <!-- Accept Command -->
  <element name="accept">
    <annotation>
      <documentation>
        Instructs the server to send notification to the calling party that the call will be dealt with and that ringing may begin.
      </documentation>
    </annotation>
    <complexType>
      <sequence>
        <element name="header" type="tns:headerType" minOccurs="0" maxOccurs="unbounded" />
      </sequence>
    </complexType>
  </element>

  <!-- Answer Command -->
  <element name="answer">
    <annotation>
      <documentation>
        Instructs the server to pick up an incoming call and connect the media stream.
      </documentation>
    </annotation>
    <complexType>
      <sequence>
        <element name="header" type="tns:headerType" minOccurs="0" maxOccurs="unbounded" />
      </sequence>
    </complexType>
  </element>

  <!-- Redirect Command -->
  <element name="redirect">
    <annotation>
      <documentation>
        Instructs the calling party that the call will not be accepted and that instead it should try to call the URI indicated in the command.
      </documentation>
    </annotation>
    <complexType>
      <attribute name="to" type="anyURI" />
      <sequence>
        <element name="header" type="tns:headerType" minOccurs="0" maxOccurs="unbounded" />
      </sequence>
    </complexType>
  </element>

  <!-- Reject Command -->
  <element name="reject">
    <annotation>
      <documentation>
        Instructs the server to reject the call with a given reason.
      </documentation>
    </annotation>
    <complexType mixed="true">
      <sequence>
        <choice>
          <element name="decline" type="tns:empty">
            <annotation>
              <documentation>
                Indicates that the controlling party refused the call for an unspecified reason, such as access control.
              </documentation>
            </annotation>
          </element>
          <element name="busy" type="tns:empty">
            <annotation>
              <documentation>
                Indicates that the controlling party refused the call due to excess load.
              </documentation>
            </annotation>
          </element>
          <element name="error" type="tns:empty">
            <annotation>
              <documentation>
                Indicates that the controlling party refused the call because some error occurred.
              </documentation>
            </annotation>
          </element>
        </choice>
        <element name="header" type="tns:headerType" minOccurs="0" maxOccurs="unbounded" />
      </sequence>
    </complexType>
  </element>

  <!-- Hangup Command -->
  <element name="hangup">
    <annotation>
      <documentation>
        Instructs the server to bring the call to an end naturally.
      </documentation>
    </annotation>
    <complexType>
      <sequence>
        <element name="header" type="tns:headerType" minOccurs="0" maxOccurs="unbounded" />
      </sequence>
    </complexType>
  </element>

  <!-- Dial Command -->
  <element name="dial">
    <annotation>
      <documentation>
        Instructs the server to create a new call and surrender control of it to the requesting party.
      </documentation>
    </annotation>
    <complexType>
      <attribute name="to" type="anyURI" use="required">
        <annotation>
          <documentation>
            Indicates the party to whom the call should be directed.
          </documentation>
        </annotation>
      </attribute>
      <attribute name="from" type="anyURI" use="optional">
        <annotation>
          <documentation>
            Indicates the caller ID with which the call should appear to originate.
          </documentation>
        </annotation>
      </attribute>
      <attribute name="timeout" type="tns:timeoutType" use="optional" default="-1">
        <annotation>
          <documentation>
            Indicates the maximum time allowed for a response to be provided by the third party before the call should be considered to have come to an end.
          </documentation>
        </annotation>
      </attribute>
      <sequence>
        <element name="header" type="tns:headerType" minOccurs="0" maxOccurs="unbounded" />
        <element name="join" type="tns:joinCommandType" minOccurs="0" maxOccurs="unbounded">
          <annotation>
            <documentation>
              Instructs the server to join the new call in the indicated mannor rather than the default (join to the local media server).
            </documentation>
          </annotation>
        </element>
      </sequence>
    </complexType>
  </element>

  <!-- Join Command -->
  <element name="join">
    <annotation>
      <documentation>
        Instructs the server to join the media streams of the call and the specified party, given direction and media negotiation parameters.
      </documentation>
    </annotation>
    <complexType>
      <complexContent>
        <extension base="tns:joinType">
          <attribute name="direction" use="optional" default="duplex">
            <annotation>
              <documentation>
                Indicates the direction in which the media should flow between the call and the 3rd party.
              </documentation>
            </annotation>
            <simpleType>
              <restriction base="token">
                <enumeration value="duplex">
                  <annotation>
                    <documentation>
                      Indicates that media should flow in both directions between the parties.
                    </documentation>
                  </annotation>
                </enumeration>
                <enumeration value="send">
                  <annotation>
                    <documentation>
                      Indicates that media should only flow from the target call to the third party.
                    </documentation>
                  </annotation>
                </enumeration>
                <enumeration value="recv">
                  <annotation>
                    <documentation>
                      Indicates that media should only flow from the third party to the target call.
                    </documentation>
                  </annotation>
                </enumeration>
              </restriction>
            </simpleType>
          </attribute>
          <attribute name="media" use="optional" default="bridge">
            <annotation>
              <documentation>
                Indicates the manner in which the server should negotiate media between the two parties.
              </documentation>
            </annotation>
            <simpleType>
              <restriction base="token">
                <enumeration value="bridge">
                  <annotation>
                    <documentation>
                      Instructs the server to bridge the parties media streams via its local media server.
                    </documentation>
                  </annotation>
                </enumeration>
                <enumeration value="direct">
                  <annotation>
                    <documentation>
                      Instructs the server to have the parties negotiate media directly with one another.
                    </documentation>
                  </annotation>
                </enumeration>
              </restriction>
            </simpleType>
          </attribute>
        </extension>
      </complexContent>
    </complexType>
  </element>

  <!-- Unjoin Command -->
  <element name="unjoin" type="tns:joinType">
    <annotation>
      <documentation>
        Instructs the server to unjoin the media streams of the call and the specified party.
      </documentation>
    </annotation>
  </element>

  <!-- Joined Event -->
  <element name="joined" type="tns:joinType">
    <annotation>
      <documentation>
        Indicates that the call was successfully joined to the specified party.
      </documentation>
    </annotation>
  </element>

  <!-- Unjoined Event -->
  <element name="unjoined" type="tns:joinType">
    <annotation>
      <documentation>
        Indicates that the call ceased to be joined to the specified party.
      </documentation>
    </annotation>
  </element>

  <complexType name="joinType">
    <attribute name="call-id" type="token" use="optional">
      <annotation>
        <documentation>
          Indicates the 3rd party call ID to which the target call should be joined. May not be set if the mixer-name attribute is set.
        </documentation>
      </annotation>
    </attribute>
    <attribute name="mixer-name" type="token" use="optional">
      <annotation>
        <documentation>
          Indicates the mixer name to which the target call should be joined. May not be set if the call-id attribute is set.
        </documentation>
      </annotation>
    </attribute>
  </complexType>

  <!-- Started Speaking Event -->
  <element name="started-speaking" type="tns:activeSpeakerType">
    <annotation>
      <documentation>
        Indicates that a call joined to a mixer with which the controlling party has an events subscription has activated a speech detector, providing its ID.
      </documentation>
    </annotation>
  </element>

  <!-- Stopped Speaking Event -->
  <element name="stopped-speaking" type="tns:activeSpeakerType">
    <annotation>
      <documentation>
        Indicates that a call joined to a mixer with which the controlling party has an events subscription has ceased activation of a speech detector, providing its ID.
      </documentation>
    </annotation>
  </element>

  <complexType name="activeSpeakerType">
    <attribute name="call-id" type="token" use="required">
      <annotation>
        <documentation>
          Indicates the ID of the call which has triggered the speech detector.
        </documentation>
      </annotation>
    </attribute>
  </complexType>

  <!-- Resource Reference -->
  <element name="ref">
    <annotation>
      <documentation>
        Used to give an indication of the identity of a newly created resource, either a call or a component.
      </documentation>
    </annotation>
    <complexType>
      <attribute name="id" type="token" use="required">
        <annotation>
          <documentation>
            Gives the ID of the new resource.
          </documentation>
        </annotation>
      </attribute>
    </complexType>
  </element>

  <!-- Utility: Empty Type -->
  <simpleType name="empty">
    <restriction base="string">
      <enumeration value='' />
    </restriction>
  </simpleType>

  <!-- Utility: Duration Type -->
  <simpleType name="durationType">
    <restriction base="long">
      <annotation>
        <documentation>
          Value is a duration in milleseconds
        </documentation>
      </annotation>
    </restriction>
  </simpleType>

  <!-- Utility: Timeout Type -->
  <simpleType name="timeoutType">
    <annotation>
      <documentation>
        A value of -1 indicates no timeout
      </documentation>
    </annotation>

    <restriction base="tns:durationType">
      <minInclusive value="-1"/>
    </restriction>
  </simpleType>

  <!-- Utility: Fraction Decimal Type -->
  <simpleType name="fractionDecimalType">
    <restriction base="decimal">
      <minInclusive value="0"/>
      <maxInclusive value="1"/>
    </restriction>
  </simpleType>

</schema>
    ]]></code>
  </section2>
  <section2 topic='Rayo Ext' anchor='schema-rayo-ext'>
  <code><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
  targetNamespace="urn:xmpp:rayo:ext:1"
  xmlns:tns="urn:xmpp:rayo:ext:1"
  elementFormDefault="qualified"
  xmlns:core="urn:xmpp:rayo:1">

  <annotation>
    <documentation>
      The protocol documented by this schema is defined at http://rayo.org/xep
    </documentation>
  </annotation>

  <!-- Stop Command -->
  <element name="stop" type="core:empty">
    <annotation>
      <documentation>
        Instructs a component to come to an end before it completes naturally.
      </documentation>
    </annotation>
  </element>

  <!-- Complete Event -->
  <element name="complete">
    <annotation>
      <documentation>
        Indicates that the component has come to an end and no further processing will occurr. Gives the reason for the termination.
      </documentation>
    </annotation>
    <complexType mixed="true">
      <choice minOccurs="1" maxOccurs="1">
        <any>
          <annotation>
            <documentation>
              The reason for component termination. May be either one of the core termination reasons (stop, hangup, error) or a component specific reason.
            </documentation>
          </annotation>
        </any>
      </choice>
    </complexType>
  </element>

</schema>
    ]]></code>
  </section2>
  <section2 topic='Rayo Ext Complete' anchor='schema-rayo-ext-complete'>
  <code><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
  targetNamespace="urn:xmpp:rayo:ext:complete:1"
  xmlns:tns="urn:xmpp:rayo:ext:complete:1"
  elementFormDefault="qualified"
  xmlns:core="urn:xmpp:rayo:1">

  <annotation>
    <documentation>
      The protocol documented by this schema is defined at http://rayo.org/xep
    </documentation>
  </annotation>

  <!-- Complete due to a <stop/> command -->
  <element name="stop" type="tns:completeReason">
    <annotation>
      <documentation>
        Indicates that the component came to an end because it was issued a stop command by the controlling party.
      </documentation>
    </annotation>
  </element>

  <!-- Complete due to a hangup -->
  <element name="hangup" type="tns:completeReason">
    <annotation>
      <documentation>
        Indicates that the component came to an end because the call ended.
      </documentation>
    </annotation>
  </element>

  <!-- Complete due to a system error -->
  <element name="error" type="string">
    <annotation>
      <documentation>
        Indicates that the component came to an end because it encountered an error.
      </documentation>
    </annotation>
  </element>

  <complexType name="completeReason" mixed="true">
    <any minOccurs="0" maxOccurs="unbounded">
      <annotation>
        <documentation>
          May be any component specific meta-data elements.
        </documentation>
      </annotation>
    </any>
  </complexType>

</schema>
    ]]></code>
  </section2>
  <section2 topic='Rayo Output' anchor='schema-rayo-output'>
  <code><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
  targetNamespace="urn:xmpp:rayo:output:1"
  xmlns:tns="urn:xmpp:rayo:output:1"
  elementFormDefault="qualified"
  xmlns:core="urn:xmpp:rayo:1">

  <annotation>
    <documentation>
      The protocol documented by this schema is defined at http://rayo.org/xep
    </documentation>
  </annotation>

  <!-- Main output command -->
  <element name="output">
    <annotation>
      <documentation>
        Instructs the server to begin an output component executing on the target call or mixer with the specified document and parameters.
      </documentation>
    </annotation>
    <complexType>
      <simpleContent>
        <attribute name="start-offset" type="core:durationType" use="optional" default="0">
          <annotation>
            <documentation>
              Indicates some offset through which the output should be skipped before rendering begins.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="start-paused" type="boolean" use="optional" default="false">
          <annotation>
            <documentation>
              Indicates wether or not the component should be started in a paused state to be resumed at a later point.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="repeat-interval" type="core:durationType" use="optional" default="0">
          <annotation>
            <documentation>
              Indicates the duration of silence that should space repeats of the rendered document.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="repeat-times" type="integer" use="optional" default="1">
          <annotation>
            <documentation>
              Indicates the number of times the output should be played.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="max-time" type="core:timeoutType" use="optional" default="-1">
          <annotation>
            <documentation>
              Indicates the maximum amount of time for which the output should be allowed to run before being terminated. Includes repeats.
            </documentation>
          </annotation>
        </attribute>

        <restriction base="CDATA" />
      </simpleContent>
    </complexType>
  </element>

  <!-- Pause command -->
  <element name="pause" type="core:empty">
    <annotation>
      <documentation>
        Instructs the server to cease rendering output at the current marker and permit resumption from the same point.
      </documentation>
    </annotation>
  </element>

  <!-- Resume command -->
  <element name="resume" type="core:empty">
    <annotation>
      <documentation>
        Instructs the server to continue rendering the output from the last pause marker.
      </documentation>
    </annotation>
  </element>

  <!-- Seek command -->
  <element name="seek">
    <annotation>
      <documentation>
        Instructs the server to instantly proceed by a specified amount through the rendered document without producing output.
      </documentation>
    </annotation>
    <complexType>
      <attribute name="direction" type="token" use="required">
        <annotation>
          <documentation>
            Indicates the direction in which the play marker should be moved through the rendered audio.
          </documentation>
        </annotation>
        <simpleType>
          <restriction base="token">
            <enumeration value="forward"/>
            <enumeration value="back"/>
          </restriction>
        </simpleType>
      </attribute>
      <attribute name="amount" type="core:durationType" use="required">
        <annotation>
          <documentation>
            Indicates the duration of audio to skip through.
          </documentation>
        </annotation>
      </attribute>
    </complexType>
  </element>

  <!-- Speed up command -->
  <element name="speed-up" type="core:empty">
    <annotation>
      <documentation>
        Instructs the server to increase the rate of output by a unit amount.
      </documentation>
    </annotation>
  </element>

  <!-- Speed down command -->
  <element name="speed-down" type="core:empty">
    <annotation>
      <documentation>
        Instructs the server to decrease the rate of output by a unit amount.
      </documentation>
    </annotation>
  </element>

  <!-- Volume up command -->
  <element name="volume-up" type="core:empty">
    <annotation>
      <documentation>
        Instructs the server to increase the volume of output by a unit amount.
      </documentation>
    </annotation>
  </element>

  <!-- Volume down command -->
  <element name="volume-down" type="core:empty">
    <annotation>
      <documentation>
        Instructs the server to decrease the volume of output by a unit amount.
      </documentation>
    </annotation>
  </element>

</schema>
    ]]></code>
  </section2>
  <section2 topic='Rayo Output Complete' anchor='schema-rayo-output-complete'>
  <code><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
  targetNamespace="urn:xmpp:rayo:output:complete:1"
  xmlns:tns="urn:xmpp:rayo:output:complete:1"
  elementFormDefault="qualified"
  xmlns:core="urn:xmpp:rayo:1">

  <annotation>
    <documentation>
      The protocol documented by this schema is defined at http://rayo.org/xep
    </documentation>
  </annotation>

  <!-- Finish reason -->
  <element name="finish" type="core:empty">
    <annotation>
      <documentation>
        Indicates that the output component came to an end as a result of reaching the end of the document to be rendered.
      </documentation>
    </annotation>
  </element>

  <!-- MaxTime reason -->
  <element name="max-time" type="core:empty">
    <annotation>
      <documentation>
        Indicates that the output component came to an end due to the maximum time limit being reached.
      </documentation>
    </annotation>
  </element>

</schema>
    ]]></code>
  </section2>
  <section2 topic='Rayo Input' anchor='schema-rayo-input'>
  <code><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
  targetNamespace="urn:xmpp:rayo:input:1"
  xmlns:tns="urn:xmpp:rayo:input:1"
  elementFormDefault="qualified"
  xmlns:core="urn:xmpp:rayo:1">

  <annotation>
    <documentation>
      The protocol documented by this schema is defined at http://rayo.org/xep
    </documentation>
  </annotation>

  <complexType name="grammarType">
    <simpleContent>
      <attribute name="url" type="anyURI" use="optional">
        <annotation>
          <documentation>
            Provides a URI at which the grammar document is available. Must not be provided if the content-type attribute is set or the element contains a grammar document as CDATA.
          </documentation>
        </annotation>
      </attribute>
      <attribute name="content-type" type="string" use="optional">
        <annotation>
          <documentation>
            Indicates the content type of the grammar document provided as CDATA. Must not be set if the url attribute is set.
          </documentation>
        </annotation>
      </attribute>

      <restriction base="CDATA" />
    </simpleContent>
  </complexType>

  <!-- Main Input command -->
  <element name="input">
    <annotation>
      <documentation>
        Instructs the server to begin an input detector of the specified mode, with certain attributes, governed by the rules provided in one or more grammar documents.
      </documentation>
    </annotation>
    <complexType>
      <simpleContent>
        <attribute name="mode" use="optional" default="any">
          <annotation>
            <documentation>
              Indicates the particular variety of input detector to be started.
            </documentation>
          </annotation>
          <simpleType>
            <restriction base="token">
              <enumeration value="any" />
              <enumeration value="speech" />
              <enumeration value="dtmf" />
            </restriction>
          </simpleType>
        </attribute>
        <attribute name="terminator" type="token" use="optional" default="">
          <annotation>
            <documentation>
              Indicates a terminator token which, when encountered, should cause the input detection to cease.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="recognizer" type="token" use="optional" default="en-US">
          <annotation>
            <documentation>
              Indicates the name of the particular input processor to be engaged. Usually only applies to speech input, in order to specify the recognition language.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="initial-timeout" type="core:timeoutType" use="optional" default="-1">
          <annotation>
            <documentation>
              Indicates the amount of time preceding input which may expire before a timeout is triggered.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="inter-digit-timeout" type="core:timeoutType" use="optional" default="-1">
          <annotation>
            <documentation>
              Indicates (in the case of DTMF input) the amount of time between input digits which may expire before a timeout is triggered.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="sensitivity" type="core:fractionDecimalType" use="optional" default="0.5">
          <annotation>
            <documentation>

            </documentation>
          </annotation>
        </attribute>
        <attribute name="min-confidence" type="core:fractionDecimalType" use="optional" default="0">
          <annotation>
            <documentation>
              Indicates the confidence threshold, below which a match is to be considered unreliable.
            </documentation>
          </annotation>
        </attribute>
        <attribute name="max-silence" type="core:timeoutType" use="optional" default="-1">
          <annotation>
            <documentation>
              Indicates the maximum period of silence which may be encountered during input gathering before a timeout is triggered.
            </documentation>
          </annotation>
        </attribute>

        <sequence>
          <element name="grammar" type="tns:grammarType" minOccurs="1" maxOccurs="unbounded">
            <annotation>
              <documentation>
                Provides the grammar document by which the input detection should be governed.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </simpleContent>
    </complexType>
  </element>

</schema>
    ]]></code>
  </section2>
  <section2 topic='Rayo Input Complete' anchor='schema-rayo-input-complete'>
  <code><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
  targetNamespace="urn:xmpp:rayo:input:complete:1"
  xmlns:tns="urn:xmpp:rayo:input:complete:1"
  elementFormDefault="qualified"
  xmlns:core="urn:xmpp:rayo:1">

  <annotation>
    <documentation>
      The protocol documented by this schema is defined at http://rayo.org/xep
    </documentation>
  </annotation>

  <!-- Finish reason -->
  <element name="finish">
    <annotation>
      <documentation>
        Indicates that the component came to an end due to one of its grammars matching the received input.
      </documentation>
    </annotation>
    <complexType>
      <element name="match" type="tns:matchType" />
    </complexType>
  </element>

  <!-- Initial timeout reason -->
  <element name="initial-timeout" type="core:empty">
    <annotation>
      <documentation>
        Indicates that the component came to an end because the initial timeout was triggered.
      </documentation>
    </annotation>
  </element>

  <!-- Inter-digit timeout reason -->
  <element name="inter-digit-timeout" type="core:empty">
    <annotation>
      <documentation>
        Indicates that the component came to an end because the inter-digit timeout was triggered.
      </documentation>
    </annotation>
  </element>

  <!-- Max-silence reason -->
  <element name="max-silence" type="core:empty">
    <annotation>
      <documentation>
        Indicates that the component came to an end because the max-silence timeout was triggered.
      </documentation>
    </annotation>
  </element>

  <!-- Min-confidence reason -->
  <element name="min-confidence" type="core:empty">
    <annotation>
      <documentation>
        Indicates that the component came to an end because the minimum confidence threshold was not reached.
      </documentation>
    </annotation>
  </element>

  <!-- NoMatch reason -->
  <element name="nomatch" type="core:empty">
    <annotation>
      <documentation>
        Indicates that the component came to an end because input was received which did not match any of the specified grammars.
      </documentation>
    </annotation>
  </element>

  <!-- Match Data -->
  <complexType name="matchType">
    <attribute name="mode" use="required">
      <annotation>
        <documentation>
          Indicates the mode by which the match occurred.
        </documentation>
      </annotation>
      <simpleType>
        <restriction base="token">
          <enumeration value="speech" />
          <enumeration value="dtmf" />
        </restriction>
      </simpleType>
    </attribute>
    <attribute name="confidence" type="core:fractionDecimalType" use="required">
      <annotation>
        <documentation>
          Indicates the confidence with which the match has been made.
        </documentation>
      </annotation>
    </attribute>
    <element name="interpretation" type="CDATA">
      <annotation>
        <documentation>
          Provides the result of the grammar match after any symantic processing which may have been performed.
        </documentation>
      </annotation>
    </element>
    <element name="utterance" type="string">
      <annotation>
        <documentation>
          Provides the raw string of the detected input.
        </documentation>
      </annotation>
    </element>
  </complexType>

</schema>
    ]]></code>
  </section2>
  <section2 topic='Rayo Record' anchor='schema-rayo-record'>
  <code><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
  targetNamespace="urn:xmpp:rayo:record:1"
  xmlns:tns="urn:xmpp:rayo:record:1"
  elementFormDefault="qualified"
  xmlns:core="urn:xmpp:rayo:1">

  <annotation>
    <documentation>
      The protocol documented by this schema is defined at http://rayo.org/xep
    </documentation>
  </annotation>

  <!-- Main Record command -->
  <element name="record">
    <annotation>
      <documentation>
        Instructs the server to begin recording input to the call to a file.
      </documentation>
    </annotation>
    <complexType>
      <attribute name="format" type="token" use="optional" default="mp3">
        <annotation>
          <documentation>
            File format used during recording.
          </documentation>
        </annotation>
      </attribute>
      <attribute name="start-beep" type="boolean" use="optional" default="false">
        <annotation>
          <documentation>
            Indicates whether subsequent record will be preceded with a beep.
          </documentation>
        </annotation>
      </attribute>
      <attribute name="start-paused" type="boolean" use="optional" default="false">
        <annotation>
          <documentation>
            Whether subsequent record will start in PAUSE mode.
          </documentation>
        </annotation>
      </attribute>
      <attribute name="max-duration" type="core:timeoutType" use="optional" default="-1">
        <annotation>
          <documentation>
            Indicates the maximum duration for the recording.
          </documentation>
        </annotation>
      </attribute>
      <attribute name="initial-timeout" type="core:timeoutType" use="optional" default="-1">
        <annotation>
          <documentation>
            Controls how long the recognizer should wait after the end of the prompt for the caller to speak before sending a Recorder event.
          </documentation>
        </annotation>
      </attribute>
      <attribute name="final-timeout" type="core:timeoutType" use="optional" default="-1">
        <annotation>
          <documentation>
            Controls the length of a period of silence after callers have spoken to conclude they finished.
          </documentation>
        </annotation>
      </attribute>

      <sequence>
        <element name="hint" minOccurs="0" maxOccurs="unbounded">
          <annotation>
            <documentation>
              Optional format-specific encoding hints
            </documentation>
          </annotation>
          <complexType>
            <attribute name="name" type="string" use="required">
              <annotation>
                <documentation>
                  The name of the hint value as expected by the recorder.
                </documentation>
              </annotation>
            </attribute>
            <attribute name="value" type="string" use="required">
              <annotation>
                <documentation>
                  The value of the hint provided.
                </documentation>
              </annotation>
            </attribute>
          </complexType>
        </element>
      </sequence>
    </complexType>
  </element>

  <!-- Pause command -->
  <element name="pause" type="core:empty">
    <annotation>
      <documentation>
        Instructs the server to cease recording input but to leave the destination open for appending to permit resumption from the same point.
      </documentation>
    </annotation>
  </element>

  <!-- Resume command -->
  <element name="resume" type="core:empty">
    <annotation>
      <documentation>
        Instructs the server to continue recording input, appending to the same destination.
      </documentation>
    </annotation>
  </element>

</schema>
    ]]></code>
  </section2>
  <section2 topic='Rayo Record Complete' anchor='schema-rayo-record-complete'>
  <code><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
  targetNamespace="urn:xmpp:rayo:record:complete:1"
  xmlns:tns="urn:xmpp:rayo:record:complete:1"
  elementFormDefault="qualified"
  xmlns:core="urn:xmpp:rayo:1">

  <annotation>
    <documentation>
      The protocol documented by this schema is defined at http://rayo.org/xep
    </documentation>
  </annotation>

  <!-- Max Duration reason -->
  <element name="max-duration">
    <annotation>
      <documentation>
        Indicates that the component came to an end due to the max duration being reached.
      </documentation>
    </annotation>
    <complexType>
      <element name="recording" type="tns:recordingType" />
    </complexType>
  </element>

  <!-- Initial Timeout reason -->
  <element name="initial-timeout">
    <annotation>
      <documentation>
        Indicates that the component came to an end due to no input being detected before the initial-timeout
      </documentation>
    </annotation>
    <complexType>
      <element name="recording" type="tns:recordingType" />
    </complexType>
  </element>

  <!-- Final Timeout reason -->
  <element name="final-timeout">
    <annotation>
      <documentation>
        Indicates that the component came to an end because no input had been detected for the final timeout duration.
      </documentation>
    </annotation>
    <complexType>
      <element name="recording" type="tns:recordingType" />
    </complexType>
  </element>

  <!-- Recording data -->
  <complexType name="recordingType">
    <attribute name="uri" type="anyURI" use="required">
      <annotation>
        <documentation>
          Indicates the URI at which the recording is made available.
        </documentation>
      </annotation>
    </attribute>
    <attribute name="duration" type="core:durationType" use="required">
      <annotation>
        <documentation>
          Indicates the duration of the completed recording.
        </documentation>
      </annotation>
    </attribute>
    <attribute name="size" type="long" use="required">
      <annotation>
        <documentation>
          Indicates the filesize (in bytes) of the completed recording.
        </documentation>
      </annotation>
    </attribute>
  </complexType>

</schema>
    ]]></code>
  </section2>
</section1>
<section1 topic='History' anchor='history'>
  Prior to the development of the Rayo protocol, the most widely-used 3PCC protocols were Asterisk's AGI and AMI. Unfortunately, these protocols have many drawbacks, not least in their inconsistency and relatively poor documentation, but also in that they are poorly secured and lacking in attributes required for significant scalability. Much 3PCC activity is also done using process-internal APIs rather than a wire protocol like XMPP.

  <p>Rayo was developed to satisfy three main desires:</p>
  <ul>
    <li>To separate the application logic from the back-end call processing infrastructure for large-scale scripting-based hosted voice application platforms. This helps to ensure that the performance of the back-end infrastructure cannot be impacted by the applications controling it, and specifically to allow sandboxing the applications.</li>
    <li>To create a platform-agnostic protocol for the control of live media sessions that has been designed from the start for such use.</li>
    <li>To enable authenticated, federated, web-scale 3PCC on platforms with APIs only suitable for trusted internal use (Asterisk, FreeSWITCH, etc).</li>
  </ul>

  Initial development of the Rayo specification and its reference implementation was provided by Voxeo Labs and Telefónica, with Punchblock being the first client library implementation, as part of the Adhearsion project. Since the beginning of the development process, further implementation efforts have begun on top of Asterisk's AGI/AMI protocols, as well as client library implementations in Node/CoffeeScript and Python.
</section1>
<section1 topic='Acknowledgements' anchor='acknowledgements'>

</section1>
</xep>
